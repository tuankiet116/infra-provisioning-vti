module.ecr.module.ecr.data.aws_caller_identity.current: Reading...
data.aws_caller_identity.current: Reading...
module.iam.data.aws_iam_openid_connect_provider.github: Reading...
module.ecr.module.ecr.data.aws_partition.current: Reading...
module.networking.module.vpc.aws_vpc.this[0]: Refreshing state... [id=vpc-09b36e6db896be6e1]
module.eks.module.eks.aws_cloudwatch_log_group.this[0]: Refreshing state... [id=/aws/eks/DE000079-eks-dev/cluster]
module.ecr.module.ecr.data.aws_partition.current: Read complete after 0s [id=aws]
module.eks.module.eks.aws_eks_cluster.this[0]: Refreshing state... [id=DE000079-eks-dev]
module.ecr.module.ecr.data.aws_caller_identity.current: Read complete after 0s [id=234139188789]
data.aws_caller_identity.current: Read complete after 0s [id=234139188789]
module.iam.data.aws_iam_openid_connect_provider.github: Read complete after 1s [id=arn:aws:iam::234139188789:oidc-provider/token.actions.githubusercontent.com]
module.iam.aws_iam_role.github_actions: Refreshing state... [id=DE000079-dev-github-actions]
module.networking.module.vpc.aws_default_security_group.this[0]: Refreshing state... [id=sg-0e104cdf00d6fbdf3]
module.networking.module.vpc.aws_default_route_table.default[0]: Refreshing state... [id=rtb-0c5370455e6dfc7b0]
module.networking.module.vpc.aws_subnet.private[2]: Refreshing state... [id=subnet-008bde8f553ceba93]
module.networking.module.vpc.aws_subnet.private[0]: Refreshing state... [id=subnet-099d6b3f4ad4ee462]
module.networking.module.vpc.aws_subnet.private[1]: Refreshing state... [id=subnet-00c8d27ee94f6af0e]
module.networking.module.vpc.aws_default_network_acl.this[0]: Refreshing state... [id=acl-0da7f1805fe5bc11f]
module.networking.module.vpc.aws_subnet.public[1]: Refreshing state... [id=subnet-0b0ccacd340526b58]
module.networking.module.vpc.aws_subnet.public[2]: Refreshing state... [id=subnet-07e3adea15c82f1a8]
module.networking.module.vpc.aws_subnet.public[0]: Refreshing state... [id=subnet-07fd67b00bc127ab8]
module.networking.module.vpc.aws_route_table.private[2]: Refreshing state... [id=rtb-0ff017baaab5225d5]
module.networking.module.vpc.aws_route_table.private[0]: Refreshing state... [id=rtb-07d1034075b74b509]
module.networking.module.vpc.aws_route_table.private[1]: Refreshing state... [id=rtb-0352295d312eff944]
module.networking.module.vpc.aws_route_table.public[0]: Refreshing state... [id=rtb-06ecc0610ffffcd41]
module.networking.module.vpc.aws_internet_gateway.this[0]: Refreshing state... [id=igw-0f3071b95253af455]
module.iam.aws_iam_role_policy_attachment.ecr_poweruser: Refreshing state... [id=DE000079-dev-github-actions/arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser]
module.iam.aws_iam_role_policy_attachment.eks_fullaccess: Refreshing state... [id=DE000079-dev-github-actions/arn:aws:iam::aws:policy/AmazonEKSClusterPolicy]
module.iam.aws_iam_role_policy.terraform_state_access: Refreshing state... [id=DE000079-dev-github-actions:DE000079-dev-terraform-state-access]
module.ecr.module.ecr.data.aws_iam_policy_document.repository[0]: Reading...
module.ecr.module.ecr.data.aws_iam_policy_document.repository[0]: Read complete after 0s [id=2279122210]
module.networking.module.vpc.aws_route_table_association.private[0]: Refreshing state... [id=rtbassoc-00f3575575001c17d]
module.networking.module.vpc.aws_route_table_association.private[1]: Refreshing state... [id=rtbassoc-018439e12f9dda9e7]
module.networking.module.vpc.aws_route_table_association.private[2]: Refreshing state... [id=rtbassoc-0b5c20fc16d1a2a07]
module.networking.module.vpc.aws_route_table_association.public[0]: Refreshing state... [id=rtbassoc-0ed38c4f39416fe60]
module.networking.module.vpc.aws_route_table_association.public[1]: Refreshing state... [id=rtbassoc-0fd46bd07eb99eb1c]
module.networking.module.vpc.aws_route_table_association.public[2]: Refreshing state... [id=rtbassoc-0a72016fef7de8dc9]
module.networking.module.vpc.aws_route.public_internet_gateway[0]: Refreshing state... [id=r-rtb-06ecc0610ffffcd411080289494]
module.networking.module.vpc.aws_eip.nat[1]: Refreshing state... [id=eipalloc-01555b7b388d42132]
module.networking.module.vpc.aws_eip.nat[2]: Refreshing state... [id=eipalloc-06e9ea50e8219f0b8]
module.networking.module.vpc.aws_eip.nat[0]: Refreshing state... [id=eipalloc-0048ab6478b8c0da8]
module.networking.module.vpc.aws_nat_gateway.this[1]: Refreshing state... [id=nat-03d3c92569f42d713]
module.networking.module.vpc.aws_nat_gateway.this[2]: Refreshing state... [id=nat-03650f6d4e792bf1e]
module.networking.module.vpc.aws_nat_gateway.this[0]: Refreshing state... [id=nat-03927e7179b2ac731]
module.networking.module.vpc.aws_route.private_nat_gateway[0]: Refreshing state... [id=r-rtb-07d1034075b74b5091080289494]
module.networking.module.vpc.aws_route.private_nat_gateway[1]: Refreshing state... [id=r-rtb-0352295d312eff9441080289494]
module.networking.module.vpc.aws_route.private_nat_gateway[2]: Refreshing state... [id=r-rtb-0ff017baaab5225d51080289494]
module.eks.data.aws_caller_identity.current: Reading...
module.eks.data.aws_partition.current: Reading...
module.eks.data.aws_partition.current: Read complete after 0s [id=aws]
module.eks.data.aws_caller_identity.current: Read complete after 0s [id=234139188789]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
  - destroy

Terraform will perform the following actions:

  # module.eks.aws_eks_cluster.main will be created
  + resource "aws_eks_cluster" "main" {
      + arn                           = (known after apply)
      + bootstrap_self_managed_addons = true
      + certificate_authority         = (known after apply)
      + cluster_id                    = (known after apply)
      + created_at                    = (known after apply)
      + deletion_protection           = (known after apply)
      + enabled_cluster_log_types     = [
          + "api",
          + "audit",
          + "authenticator",
          + "controllerManager",
          + "scheduler",
        ]
      + endpoint                      = (known after apply)
      + id                            = (known after apply)
      + identity                      = (known after apply)
      + name                          = "DE000079-eks-dev"
      + platform_version              = (known after apply)
      + region                        = "ap-southeast-2"
      + role_arn                      = (known after apply)
      + status                        = (known after apply)
      + tags                          = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + tags_all                      = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + version                       = "1.33"

      + access_config (known after apply)

      + kubernetes_network_config (known after apply)

      + upgrade_policy (known after apply)

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = true
          + endpoint_public_access    = true
          + public_access_cidrs       = (known after apply)
          + security_group_ids        = (known after apply)
          + subnet_ids                = [
              + "subnet-008bde8f553ceba93",
              + "subnet-00c8d27ee94f6af0e",
              + "subnet-099d6b3f4ad4ee462",
            ]
          + vpc_id                    = (known after apply)
        }
    }

  # module.eks.aws_eks_node_group.main[0] will be created
  + resource "aws_eks_node_group" "main" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = "ON_DEMAND"
      + cluster_name           = "DE000079-eks-dev"
      + disk_size              = (known after apply)
      + id                     = (known after apply)
      + instance_types         = [
          + "t3.medium",
        ]
      + node_group_name        = "DE000079-node-group-dev"
      + node_group_name_prefix = (known after apply)
      + node_role_arn          = (known after apply)
      + region                 = "ap-southeast-2"
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = [
          + "subnet-008bde8f553ceba93",
          + "subnet-00c8d27ee94f6af0e",
          + "subnet-099d6b3f4ad4ee462",
        ]
      + tags                   = {
          + "Environment" = "dev"
          + "Name"        = "DE000079-node-dev"
          + "Terraform"   = "true"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Name"        = "DE000079-node-dev"
          + "Terraform"   = "true"
        }
      + version                = (known after apply)

      + node_repair_config (known after apply)

      + scaling_config {
          + desired_size = 1
          + max_size     = 3
          + min_size     = 1
        }

      + update_config {
          + max_unavailable = 1
        }
    }

  # module.eks.aws_iam_role.eks_cluster will be created
  + resource "aws_iam_role" "eks_cluster" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "DE000079-eks-cluster-role-dev"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks.aws_iam_role.eks_node_group[0] will be created
  + resource "aws_iam_role" "eks_node_group" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "DE000079-eks-node-role-dev"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.eks_cluster_policy will be created
  + resource "aws_iam_role_policy_attachment" "eks_cluster_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "DE000079-eks-cluster-role-dev"
    }

  # module.eks.aws_iam_role_policy_attachment.eks_cni_policy[0] will be created
  + resource "aws_iam_role_policy_attachment" "eks_cni_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "DE000079-eks-node-role-dev"
    }

  # module.eks.aws_iam_role_policy_attachment.eks_container_registry_policy[0] will be created
  + resource "aws_iam_role_policy_attachment" "eks_container_registry_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "DE000079-eks-node-role-dev"
    }

  # module.eks.aws_iam_role_policy_attachment.eks_worker_node_policy[0] will be created
  + resource "aws_iam_role_policy_attachment" "eks_worker_node_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "DE000079-eks-node-role-dev"
    }

  # module.eks.aws_security_group.eks_cluster will be created
  + resource "aws_security_group" "eks_cluster" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "DE000079-eks-cluster-dev"
      + owner_id               = (known after apply)
      + region                 = "ap-southeast-2"
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "dev"
          + "Name"        = "DE000079-eks-cluster-sg-dev"
          + "Terraform"   = "true"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Name"        = "DE000079-eks-cluster-sg-dev"
          + "Terraform"   = "true"
        }
      + vpc_id                 = "vpc-09b36e6db896be6e1"
    }

  # module.ecr.module.ecr.aws_ecr_lifecycle_policy.this[0] will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 30 images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber   = 30
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "v",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + region      = "ap-southeast-2"
      + registry_id = (known after apply)
      + repository  = "DE000079-ecr-repo-dev"
    }

  # module.ecr.module.ecr.aws_ecr_repository.this[0] will be created
  + resource "aws_ecr_repository" "this" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "IMMUTABLE"
      + name                 = "DE000079-ecr-repo-dev"
      + region               = "ap-southeast-2"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags                 = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + tags_all             = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }

      + encryption_configuration {
          + encryption_type = "AES256"
          + kms_key         = (known after apply)
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.ecr.module.ecr.aws_ecr_repository_policy.this[0] will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:ListTagsForResource",
                          + "ecr:ListImages",
                          + "ecr:GetRepositoryPolicy",
                          + "ecr:GetLifecyclePolicyPreview",
                          + "ecr:GetLifecyclePolicy",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:GetAuthorizationToken",
                          + "ecr:DescribeRepositories",
                          + "ecr:DescribeImages",
                          + "ecr:DescribeImageScanFindings",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::234139188789:role/DE000079-dev-github-actions"
                        }
                      + Sid       = "PrivateReadOnly"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:CompleteLayerUpload",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::234139188789:role/DE000079-dev-github-actions"
                        }
                      + Sid       = "ReadWrite"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + region      = "ap-southeast-2"
      + registry_id = (known after apply)
      + repository  = "DE000079-ecr-repo-dev"
    }

  # module.eks.module.eks.aws_cloudwatch_log_group.this[0] will be destroyed
  # (because aws_cloudwatch_log_group.this is not in configuration)
  - resource "aws_cloudwatch_log_group" "this" {
      - arn               = "arn:aws:logs:ap-southeast-2:234139188789:log-group:/aws/eks/DE000079-eks-dev/cluster" -> null
      - id                = "/aws/eks/DE000079-eks-dev/cluster" -> null
      - log_group_class   = "STANDARD" -> null
      - name              = "/aws/eks/DE000079-eks-dev/cluster" -> null
      - region            = "ap-southeast-2" -> null
      - retention_in_days = 0 -> null
      - skip_destroy      = false -> null
      - tags              = {} -> null
      - tags_all          = {} -> null
        # (2 unchanged attributes hidden)
    }

  # module.eks.module.eks.aws_eks_cluster.this[0] will be destroyed
  # (because aws_eks_cluster.this is not in configuration)
  - resource "aws_eks_cluster" "this" {
      - arn                           = "arn:aws:eks:ap-southeast-2:234139188789:cluster/DE000079-eks-dev" -> null
      - bootstrap_self_managed_addons = false -> null
      - certificate_authority         = [
          - {
              - data = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJWnhiRnQvNU1oa1l3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TlRBNU1EVXhPVEEwTXpaYUZ3MHpOVEE1TURNeE9UQTVNelphTUJVeApFekFSQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUUN3TUJlMGNJQVluNUc0OXk3NHdvZFQ3QlZvbmZEOVJXU3FPZGdDYTI1alk4c0FlemFTeFFZVThCdE8KQzRITTZ2TmcvaHR6WXRXaU5zQnpvVjR6TGRFbXMxNTJqcjZGb3puTG1BMUVQT3BhVG5wRjdQaU0wUzFVUlliYgpnQ2JJOVJleEh5VksvbVJLSG9KTlNrMnlveWZ2MGJraWlpODd4MkVjaGU0TS91NlJSM0tTSTF4L1NwT2laRURsCmg0NnRFVmFRdmpMTnFlY0JsR0RmRHlRbUhJNFhTMXkzd1VpdWZhRzNKcUFycFczYUVnNXVDaVlrcWxscUlDTzUKWi9EYUI1dTNyYm5TcWkyZytBM25zU0tkNDZyYlpXelczdzBlYWZnL2tzS29Xbm9heUdrKzdyRlZVRWluY09DRQp5bjgxeks0bzhDWkNPQkRHNWNlQTZ6d2ZTUnpUQWdNQkFBR2pXVEJYTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJTL0lEdTR1dUFTaDJsYTA5am9LMDJRdm1Mc2VqQVYKQmdOVkhSRUVEakFNZ2dwcmRXSmxjbTVsZEdWek1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQXp0eUIrZzh6WQp3TUp2SzJHRmR4RzF1NldRK1U2QU9CZ29Nd3hjMWpDR3dFZmVmRThldlpwekxTK0RQeVY4L05URFNETTNnRHZFCnh0cldJd0VFY09vbG8yQWZocHBTamViSGJXeVUzekRTWXNFWlEyTkpod1htZ21TdWttQ1J3R1kyMUNWTUR5QkIKTElQaHdBVFF3MGc4ZHB2RUJBWlpTZlhTLzdtQ0NxSGN3MklGZnlJdjJZVERnUVRwZnR4R0tJRTNha1Rpc1l0awpIWW4vcjlOQ2ZVVTNHTE15VWFNZmxpQ2hrNjBTSGFNUGxRdVNjNkJyNS9KV0lXdC9KcUlkN0NJdk9rUzJWcC91Ck03b3VkVFU1aXdyMWlEU1ZObEY1NmhKOTBHbGp2NzZGd3NwUXlRYVM1KzRxOGpUdjcvbDZCMWMxQ1ZZNWZWRWIKamIrMUxWZmV3bHVtCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
            },
        ] -> null
      - created_at                    = "2025-09-05T19:04:43Z" -> null
      - deletion_protection           = false -> null
      - enabled_cluster_log_types     = [
          - "api",
          - "audit",
          - "authenticator",
          - "controllerManager",
          - "scheduler",
        ] -> null
      - endpoint                      = "https://E87562D0D637EE6083F2F11283260689.gr7.ap-southeast-2.eks.amazonaws.com" -> null
      - id                            = "DE000079-eks-dev" -> null
      - identity                      = [
          - {
              - oidc = [
                  - {
                      - issuer = "https://oidc.eks.ap-southeast-2.amazonaws.com/id/E87562D0D637EE6083F2F11283260689"
                    },
                ]
            },
        ] -> null
      - name                          = "DE000079-eks-dev" -> null
      - platform_version              = "eks.12" -> null
      - region                        = "ap-southeast-2" -> null
      - role_arn                      = "arn:aws:iam::234139188789:role/DE000079-eks-cluster-role-dev" -> null
      - status                        = "ACTIVE" -> null
      - tags                          = {
          - "Environment" = "dev"
          - "Terraform"   = "true"
        } -> null
      - tags_all                      = {
          - "Environment" = "dev"
          - "Terraform"   = "true"
        } -> null
      - version                       = "1.33" -> null

      - access_config {
          - authentication_mode                         = "CONFIG_MAP" -> null
          - bootstrap_cluster_creator_admin_permissions = false -> null
        }

      - kubernetes_network_config {
          - ip_family         = "ipv4" -> null
          - service_ipv4_cidr = "172.20.0.0/16" -> null
            # (1 unchanged attribute hidden)

          - elastic_load_balancing {
              - enabled = false -> null
            }
        }

      - upgrade_policy {
          - support_type = "EXTENDED" -> null
        }

      - vpc_config {
          - cluster_security_group_id = "sg-0ed722790bb544c72" -> null
          - endpoint_private_access   = true -> null
          - endpoint_public_access    = true -> null
          - public_access_cidrs       = [
              - "0.0.0.0/0",
            ] -> null
          - security_group_ids        = [
              - "sg-0ba42d52473fc38fa",
            ] -> null
          - subnet_ids                = [
              - "subnet-008bde8f553ceba93",
              - "subnet-00c8d27ee94f6af0e",
              - "subnet-099d6b3f4ad4ee462",
            ] -> null
          - vpc_id                    = "vpc-09b36e6db896be6e1" -> null
        }
    }

Plan: 12 to add, 0 to change, 2 to destroy.

Changes to Outputs:
  + ecr_repository_url      = (known after apply)
  + eks_cluster_name        = "DE000079-eks-dev"

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
